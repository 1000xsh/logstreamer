[logstreamer]
logFilePath = "/mnt/logs/solana-validator.log"
pollInterval = 200
workerCores  = [46,47]
enable_output_aggregator = true

[exporter]
enable_http = true
http_port = 10002
enable_push = false
push_gateway_url = ""
push_interval = 10


[[logstreamer.filters]]
name = "block_commitment_cache"
pattern = "solana_metrics::metrics\\]\\s+datapoint:\\s+block-commitment-cache\\s+aggregate-commitment-ms=(?P<aggregate_commitment_ms>\\d+)i\\s+highest-super-majority-root=(?P<highest_super_majority_root>\\d+)i\\s+highest-confirmed-slot=(?P<highest_confirmed_slot>\\d+)i"
template = "block commitment cache: aggregate_commitment_ms=${aggregate_commitment_ms}, highest_super_majority_root=${highest_super_majority_root}, highest_confirmed_slot=${highest_confirmed_slot}"

[[logstreamer.filters]]
name = "spl_token_owner_index_stats"
pattern = "solana_metrics::metrics\\]\\s+datapoint:\\s+spl_token_owner_index_stats\\s+num_secondary_keys=(?P<num_secondary_keys>\\d+)i\\s+num_inner_keys=(?P<num_inner_keys>\\d+)i\\s+num_reverse_index_keys=(?P<num_reverse_index_keys>\\d+)i"
template = "spl token owner index stats: secondary_keys=${num_secondary_keys}, inner_keys=${num_inner_keys}, reverse_index_keys=${num_reverse_index_keys}"

[[logstreamer.filters]]
name = "spl_token_mint_index_stats"
pattern = "solana_metrics::metrics\\]\\s+datapoint:\\s+spl_token_mint_index_stats\\s+num_secondary_keys=(?P<num_secondary_keys>\\d+)i\\s+num_inner_keys=(?P<num_inner_keys>\\d+)i\\s+num_reverse_index_keys=(?P<num_reverse_index_keys>\\d+)i"
template = "spl token mint index stats: secondary_keys=${num_secondary_keys}, inner_keys=${num_inner_keys}, reverse_index_keys=${num_reverse_index_keys}"

[[logstreamer.filters]]
name = "gossip_metrics"
pattern = "solana_metrics::metrics\\]\\s+datapoint:\\s+Gossip\\s+streamer-send-sample_duration_ms=(?P<sample_duration>\\d+)i\\s+streamer-send-host_count=(?P<host_count>\\d+)i\\s+streamer-send-bytes_total=(?P<bytes_total>\\d+)i\\s+streamer-send-pkt_count_total=(?P<pkt_count_total>\\d+)i\\s+streamer-send-host_bytes_min=(?P<host_bytes_min>\\d+)i\\s+streamer-send-host_bytes_max=(?P<host_bytes_max>\\d+)i\\s+streamer-send-host_bytes_mean=(?P<host_bytes_mean>\\d+)i\\s+streamer-send-host_bytes_90pct=(?P<host_bytes_90pct>\\d+)i\\s+streamer-send-host_bytes_50pct=(?P<host_bytes_50pct>\\d+)i\\s+streamer-send-host_bytes_10pct=(?P<host_bytes_10pct>\\d+)i"
template = "gossip metrics: sample_duration=${sample_duration}ms, host_count=${host_count}, bytes_total=${bytes_total}, pkt_count_total=${pkt_count_total}, host_bytes[min=${host_bytes_min}, max=${host_bytes_max}, mean=${host_bytes_mean}, 90pct=${host_bytes_90pct}, 50pct=${host_bytes_50pct}, 10pct=${host_bytes_10pct}]"

[[logstreamer.filters]]
name = "cluster_info_stats"
pattern = "solana_metrics::metrics\\]\\s+datapoint:\\s+cluster_info_stats\\s+entrypoint=(?P<entrypoint>\\d+)i\\s+entrypoint2=(?P<entrypoint2>\\d+)i\\s+push_vote_read=(?P<push_vote_read>\\d+)i\\s+get_votes=(?P<get_votes>\\d+)i\\s+get_votes_count=(?P<get_votes_count>\\d+)i\\s+all_tvu_peers=(?P<all_tvu_peers>\\d+)i\\s+tvu_peers=(?P<tvu_peers>\\d+)i\\s+new_push_requests_num=(?P<new_push_requests_num>\\d+)i\\s+table_size=(?P<table_size>\\d+)i\\s+purged_values_size=(?P<purged_values_size>\\d+)i\\s+failed_inserts_size=(?P<failed_inserts_size>\\d+)i\\s+num_nodes=(?P<num_nodes>\\d+)i\\s+num_nodes_staked=(?P<num_nodes_staked>\\d+)i\\s+num_pubkeys=(?P<num_pubkeys>\\d+)i"
template = "cluster info stats: entrypoint=${entrypoint}, entrypoint2=${entrypoint2}, push_vote_read=${push_vote_read}, get_votes=${get_votes} (${get_votes_count}), tvu_peers=${tvu_peers}/${all_tvu_peers}, new_push_requests_num=${new_push_requests_num}, table_size=${table_size}, purged_values_size=${purged_values_size}, failed_inserts_size=${failed_inserts_size}, num_nodes=${num_nodes}, num_nodes_staked=${num_nodes_staked}, num_pubkeys=${num_pubkeys}"

[[logstreamer.filters]]
name = "cluster_info_stats2"
pattern = "solana_metrics::metrics\\]\\s+datapoint:\\s+cluster_info_stats2\\s+gossip_packets_dropped_count=(?P<gossip_packets_dropped_count>\\d+)i\\s+repair_peers=(?P<repair_peers>\\d+)i\\s+new_push_requests=(?P<new_push_requests>\\d+)i\\s+new_push_requests2=(?P<new_push_requests2>\\d+)i\\s+purge=(?P<purge>\\d+)i\\s+purge_count=(?P<purge_count>\\d+)i\\s+process_gossip_packets_time=(?P<process_gossip_packets_time>\\d+)i\\s+verify_gossip_packets_time=(?P<verify_gossip_packets_time>\\d+)i\\s+handle_batch_ping_messages_time=(?P<handle_batch_ping_messages_time>\\d+)i\\s+handle_batch_pong_messages_time=(?P<handle_batch_pong_messages_time>\\d+)i\\s+handle_batch_prune_messages_time=(?P<handle_batch_prune_messages_time>\\d+)i\\s+handle_batch_pull_requests_time=(?P<handle_batch_pull_requests_time>\\d+)i\\s+handle_batch_pull_responses_time=(?P<handle_batch_pull_responses_time>\\d+)i\\s+handle_batch_push_messages_time=(?P<handle_batch_push_messages_time>\\d+)i\\s+process_pull_resp=(?P<process_pull_resp>\\d+)i\\s+filter_pull_resp=(?P<filter_pull_resp>\\d+)i\\s+filter_crds_values_dropped_requests=(?P<filter_crds_values_dropped_requests>\\d+)i\\s+filter_crds_values_dropped_values=(?P<filter_crds_values_dropped_values>\\d+)i\\s+process_pull_resp_count=(?P<process_pull_resp_count>\\d+)i\\s+pull_response_fail_insert=(?P<pull_response_fail_insert>\\d+)i\\s+pull_response_fail_timeout=(?P<pull_response_fail_timeout>\\d+)i\\s+pull_response_success=(?P<pull_response_success>\\d+)i\\s+num_redundant_pull_responses=(?P<num_redundant_pull_responses>\\d+)i\\s+push_response_count=(?P<push_response_count>\\d+)i"
template = "cluster info stats2: dropped=${gossip_packets_dropped_count}, repair_peers=${repair_peers}, new_push_requests=${new_push_requests}/${new_push_requests2}, purge=${purge} (${purge_count}), gossip_time=${process_gossip_packets_time}/${verify_gossip_packets_time}, batch_times=(ping:${handle_batch_ping_messages_time}, pong:${handle_batch_pong_messages_time}, prune:${handle_batch_prune_messages_time}, pull_req:${handle_batch_pull_requests_time}, pull_resp:${handle_batch_pull_responses_time}, push:${handle_batch_push_messages_time}), pull_resp=${process_pull_resp} (filtered:${filter_pull_resp}, count:${process_pull_resp_count}), pull_fail=(insert:${pull_response_fail_insert}, timeout:${pull_response_fail_timeout}), pull_success=${pull_response_success}, redundant=${num_redundant_pull_responses}, push_resp=${push_response_count}"

[[logstreamer.filters]]
name = "cluster_info_stats3"
pattern = "solana_metrics::metrics\\]\\s+datapoint:\\s+cluster_info_stats3\\s+process_pull_resp_len=(?P<process_pull_resp_len>\\d+)i\\s+pull_request_ping_pong_check_failed_count=(?P<pull_request_ping_pong_check_failed_count>\\d+)i\\s+new_pull_requests_pings_count=(?P<new_pull_requests_pings_count>\\d+)i\\s+generate_pull_responses=(?P<generate_pull_responses>\\d+)i\\s+process_prune=(?P<process_prune>\\d+)i\\s+prune_message_timeout=(?P<prune_message_timeout>\\d+)i\\s+bad_prune_destination=(?P<bad_prune_destination>\\d+)i\\s+process_push_message=(?P<process_push_message>\\d+)i\\s+prune_received_cache=(?P<prune_received_cache>\\d+)i\\s+epoch_slots_lookup=(?P<epoch_slots_lookup>\\d+)i\\s+new_pull_requests=(?P<new_pull_requests>\\d+)i\\s+gossip_pull_request_no_budget=(?P<gossip_pull_request_no_budget>\\d+)i\\s+gossip_pull_request_sent_requests=(?P<gossip_pull_request_sent_requests>\\d+)i\\s+gossip_pull_request_dropped_requests=(?P<gossip_pull_request_dropped_requests>\\d+)i\\s+gossip_transmit_loop_time=(?P<gossip_transmit_loop_time>\\d+)i\\s+gossip_transmit_loop_iterations_since_last_report=(?P<gossip_transmit_loop_iterations_since_last_report>\\d+)i\\s+gossip_listen_loop_time=(?P<gossip_listen_loop_time>\\d+)i\\s+gossip_listen_loop_iterations_since_last_report=(?P<gossip_listen_loop_iterations_since_last_report>\\d+)i"
template = "cluster info stats3: pull_resp_len=${process_pull_resp_len}, pingpong_failed=${pull_request_ping_pong_check_failed_count}, new_pull_pings=${new_pull_requests_pings_count}, generated_pull_responses=${generate_pull_responses}, process_prune=${process_prune}, prune_timeout=${prune_message_timeout}, bad_prune=${bad_prune_destination}, push_msg=${process_push_message}, prune_cache=${prune_received_cache}, epoch_lookup=${epoch_slots_lookup}, new_pull_requests=${new_pull_requests}, no_budget=${gossip_pull_request_no_budget}, sent_requests=${gossip_pull_request_sent_requests}, dropped_requests=${gossip_pull_request_dropped_requests}, transmit_loop_time=${gossip_transmit_loop_time}, transmit_iterations=${gossip_transmit_loop_iterations_since_last_report}, listen_loop_time=${gossip_listen_loop_time}, listen_iterations=${gossip_listen_loop_iterations_since_last_report}"

[[logstreamer.filters]]
name = "cluster_info_stats4"
pattern = "solana_metrics::metrics\\]\\s+datapoint:\\s+cluster_info_stats4\\s+skip_push_message_shred_version=(?P<skip_push_message_shred_version>\\d+)i\\s+skip_pull_response_shred_version=(?P<skip_pull_response_shred_version>\\d+)i\\s+skip_pull_shred_version=(?P<skip_pull_shred_version>\\d+)i\\s+push_message_count=(?P<push_message_count>\\d+)i\\s+num_duplicate_push_messages=(?P<num_duplicate_push_messages>\\d+)i\\s+push_fanout_num_entries=(?P<push_fanout_num_entries>\\d+)i\\s+push_fanout_num_nodes=(?P<push_fanout_num_nodes>\\d+)i\\s+push_message_pushes=(?P<push_message_pushes>\\d+)i\\s+push_message_value_count=(?P<push_message_value_count>\\d+)i\\s+new_pull_requests_count=(?P<new_pull_requests_count>\\d+)i\\s+pull_from_entrypoint_count=(?P<pull_from_entrypoint_count>\\d+)i\\s+prune_message_count=(?P<prune_message_count>\\d+)i\\s+prune_message_len=(?P<prune_message_len>\\d+)i\\s+epoch_slots_filled=(?P<epoch_slots_filled>\\d+)i\\s+window_request_loopback=(?P<window_request_loopback>\\d+)i\\s+get_epoch_duration_no_working_bank=(?P<get_epoch_duration_no_working_bank>\\d+)i\\s+generate_prune_messages=(?P<generate_prune_messages>\\d+)i"
template = "cluster info stats4: skip_push=${skip_push_message_shred_version}, skip_pull_resp=${skip_pull_response_shred_version}, skip_pull=${skip_pull_shred_version}, push_msg_count=${push_message_count}, dup_push_msgs=${num_duplicate_push_messages}, fanout_entries=${push_fanout_num_entries}, fanout_nodes=${push_fanout_num_nodes}, pushes=${push_message_pushes}, push_val_count=${push_message_value_count}, new_pull_reqs=${new_pull_requests_count}, pull_from_entry=${pull_from_entrypoint_count}, prune_msg_count=${prune_message_count}, prune_msg_len=${prune_message_len}, epoch_filled=${epoch_slots_filled}, window_loopback=${window_request_loopback}, epoch_duration=${get_epoch_duration_no_working_bank}, gen_prune_msgs=${generate_prune_messages}"

[[logstreamer.filters]]
name = "cluster_info_stats5"
pattern = "solana_metrics::metrics\\]\\s+datapoint:\\s+cluster_info_stats5\\s+pull_requests_count=(?P<pull_requests_count>\\d+)i\\s+num_unverifed_gossip_addrs=(?P<num_unverifed_gossip_addrs>\\d+)i\\s+packets_received_count=(?P<packets_received_count>\\d+)i\\s+packets_received_ping_messages_count=(?P<packets_received_ping_messages_count>\\d+)i\\s+packets_received_pong_messages_count=(?P<packets_received_pong_messages_count>\\d+)i\\s+packets_received_prune_messages_count=(?P<packets_received_prune_messages_count>\\d+)i\\s+packets_received_pull_requests_count=(?P<packets_received_pull_requests_count>\\d+)i\\s+packets_received_pull_responses_count=(?P<packets_received_pull_responses_count>\\d+)i\\s+packets_received_push_messages_count=(?P<packets_received_push_messages_count>\\d+)i\\s+packets_received_unknown_count=(?P<packets_received_unknown_count>\\d+)i\\s+packets_received_verified_count=(?P<packets_received_verified_count>\\d+)i\\s+packets_sent_gossip_requests_count=(?P<packets_sent_gossip_requests_count>\\d+)i\\s+packets_sent_prune_messages_count=(?P<packets_sent_prune_messages_count>\\d+)i\\s+packets_sent_pull_requests_count=(?P<packets_sent_pull_requests_count>\\d+)i\\s+packets_sent_pull_responses_count=(?P<packets_sent_pull_responses_count>\\d+)i\\s+packets_sent_push_messages_count=(?P<packets_sent_push_messages_count>\\d+)i\\s+require_stake_for_gossip_unknown_stakes=(?P<require_stake_for_gossip_unknown_stakes>\\d+)i\\s+trim_crds_table=(?P<trim_crds_table>\\d+)i\\s+trim_crds_table_failed=(?P<trim_crds_table_failed>\\d+)i\\s+trim_crds_table_purged_values_count=(?P<trim_crds_table_purged_values_count>\\d+)i\\s+gossip_pull_request_verify_fail=(?P<gossip_pull_request_verify_fail>\\d+)i\\s+gossip_pull_response_verify_fail=(?P<gossip_pull_response_verify_fail>\\d+)i\\s+gossip_push_msg_verify_fail=(?P<gossip_push_msg_verify_fail>\\d+)i\\s+gossip_prune_msg_verify_fail=(?P<gossip_prune_msg_verify_fail>\\d+)i\\s+gossip_ping_msg_verify_fail=(?P<gossip_ping_msg_verify_fail>\\d+)i\\s+gossip_pong_msg_verify_fail=(?P<gossip_pong_msg_verify_fail>\\d+)i"
template = "cluster info stats5: pull_requests=${pull_requests_count}, unverifed_gossip_addrs=${num_unverifed_gossip_addrs}, packets_received=${packets_received_count} (ping:${packets_received_ping_messages_count}, pong:${packets_received_pong_messages_count}, prune:${packets_received_prune_messages_count}, pull_req:${packets_received_pull_requests_count}, pull_resp:${packets_received_pull_responses_count}, push:${packets_received_push_messages_count}, unknown:${packets_received_unknown_count}, verified:${packets_received_verified_count}), packets_sent=(gossip:${packets_sent_gossip_requests_count}, prune:${packets_sent_prune_messages_count}, pull_req:${packets_sent_pull_requests_count}, pull_resp:${packets_sent_pull_responses_count}, push:${packets_sent_push_messages_count}), require_stake=${require_stake_for_gossip_unknown_stakes}, trim_crds=${trim_crds_table} (failed:${trim_crds_table_failed}, purged:${trim_crds_table_purged_values_count}), verify_fail=(pull_req:${gossip_pull_request_verify_fail}, pull_resp:${gossip_pull_response_verify_fail}, push:${gossip_push_msg_verify_fail}, prune:${gossip_prune_msg_verify_fail}, ping:${gossip_ping_msg_verify_fail}, pong:${gossip_pong_msg_verify_fail})"

[[logstreamer.filters]]
name = "blockstore_insert_shreds"
pattern = "solana_metrics::metrics\\]\\s+datapoint:\\s+blockstore-insert-shreds\\s+num_shreds=(?P<num_shreds>\\d+)i\\s+total_elapsed_us=(?P<total_elapsed_us>\\d+)i\\s+insert_lock_elapsed_us=(?P<insert_lock_elapsed_us>\\d+)i\\s+insert_shreds_elapsed_us=(?P<insert_shreds_elapsed_us>\\d+)i\\s+shred_recovery_elapsed_us=(?P<shred_recovery_elapsed_us>\\d+)i\\s+chaining_elapsed_us=(?P<chaining_elapsed_us>\\d+)i\\s+commit_working_sets_elapsed_us=(?P<commit_working_sets_elapsed_us>\\d+)i\\s+write_batch_elapsed_us=(?P<write_batch_elapsed_us>\\d+)i\\s+num_inserted=(?P<num_inserted>\\d+)i\\s+num_repair=(?P<num_repair>\\d+)i\\s+num_recovered=(?P<num_recovered>\\d+)i\\s+num_recovered_inserted=(?P<num_recovered_inserted>\\d+)i\\s+num_recovered_failed_sig=(?P<num_recovered_failed_sig>\\d+)i\\s+num_recovered_failed_invalid=(?P<num_recovered_failed_invalid>\\d+)i\\s+num_recovered_exists=(?P<num_recovered_exists>\\d+)i\\s+num_recovered_blockstore_error=(?P<num_recovered_blockstore_error>\\d+)i\\s+num_repaired_data_shreds_exists=(?P<num_repaired_data_shreds_exists>\\d+)i\\s+num_turbine_data_shreds_exists=(?P<num_turbine_data_shreds_exists>\\d+)i\\s+num_data_shreds_invalid=(?P<num_data_shreds_invalid>\\d+)i\\s+num_data_shreds_blockstore_error=(?P<num_data_shreds_blockstore_error>\\d+)i\\s+num_coding_shreds_exists=(?P<num_coding_shreds_exists>\\d+)i\\s+num_coding_shreds_invalid=(?P<num_coding_shreds_invalid>\\d+)i\\s+num_coding_shreds_invalid_erasure_config=(?P<num_coding_shreds_invalid_erasure_config>\\d+)i\\s+num_coding_shreds_inserted=(?P<num_coding_shreds_inserted>\\d+)i"
template = "blockstore insert shreds: num_shreds=${num_shreds}, total_elapsed_us=${total_elapsed_us}, insert_lock_elapsed_us=${insert_lock_elapsed_us}, insert_shreds_elapsed_us=${insert_shreds_elapsed_us}, shred_recovery_elapsed_us=${shred_recovery_elapsed_us}, chaining_elapsed_us=${chaining_elapsed_us}, commit_working_sets_elapsed_us=${commit_working_sets_elapsed_us}, write_batch_elapsed_us=${write_batch_elapsed_us}, num_inserted=${num_inserted}, num_repair=${num_repair}, num_recovered=${num_recovered} (${num_recovered_inserted} inserted), failed_sig=${num_recovered_failed_sig}, failed_invalid=${num_recovered_failed_invalid}, exists=${num_recovered_exists}, blockstore_error=${num_recovered_blockstore_error}, repaired_data_shreds=${num_repaired_data_shreds_exists}, turbine_data_shreds=${num_turbine_data_shreds_exists}, data_shreds_invalid=${num_data_shreds_invalid}, data_shreds_blockstore_error=${num_data_shreds_blockstore_error}, coding_shreds_exists=${num_coding_shreds_exists}, coding_shreds_invalid=${num_coding_shreds_invalid}, coding_shreds_invalid_erasure_config=${num_coding_shreds_invalid_erasure_config}, coding_shreds_inserted=${num_coding_shreds_inserted}"

[[logstreamer.filters]]
name = "duplicate_confirmed_slot"
pattern = "solana_metrics::metrics\\]\\s+datapoint:\\s+duplicate_confirmed_slot\\s+slot=(?P<slot>\\d+)i\\s+duplicate_confirmed_hash=\"(?P<duplicate_confirmed_hash>[^\"]+)\"\\s+my_hash=\"(?P<my_hash>[^\"]+)\""
template = "duplicate confirmed slot: slot=${slot}, duplicate_confirmed_hash=${duplicate_confirmed_hash}, my_hash=${my_hash}"
